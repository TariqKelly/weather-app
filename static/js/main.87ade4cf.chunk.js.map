{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["api","datebuilder","d","day","getDay","date","getDate","month","getMonth","year","getFullYear","titleCase","string","sentence","toLowerCase","split","i","length","toUpperCase","slice","join","App","useState","query","setQuery","weather","setWeather","className","main","type","placeholder","onChange","e","target","value","onKeyPress","evt","key","fetch","then","res","json","result","console","log","name","sys","country","Date","Math","round","temp","description","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iLAEMA,EACC,mCADDA,EAEE,2CAGFC,EAAc,SAACC,GACnB,IAGIC,EAFO,CAAC,SAAU,SAAU,UAAW,YAAa,WAAY,SAAU,YAE/DD,EAAEE,UACbC,EAAOH,EAAEI,UACTC,EALS,CAAC,UAAW,WAAY,QAAS,QAAS,MAAO,OAAQ,OAAQ,SAAU,YAAa,UAAW,WAAY,YAKzGL,EAAEM,YACjBC,EAAOP,EAAEQ,cAEb,MAAM,GAAN,OAAUP,EAAV,aAAkBI,EAAlB,YAA2BF,EAA3B,YAAmCI,IAE/BE,EAAY,SAACC,GAEjB,IADA,IAAIC,EAAWD,EAAOE,cAAcC,MAAM,KAClCC,EAAI,EAAGA,EAAGH,EAASI,OAAQD,IAChCH,EAASG,GAAKH,EAASG,GAAG,GAAGE,cAAgBL,EAASG,GAAGG,MAAM,GAAK,IAGvE,OADAN,EAASO,KAAK,KACPP,GA+CMQ,MA5Cf,WACE,MAA0BC,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAA8BF,mBAAS,IAAvC,mBAAOG,EAAP,KAAgBC,EAAhB,KAiBA,OACE,qBAAKC,UAAmC,oBAAhBF,EAAQG,KAAoD,WAA5BH,EAAQA,QAAQ,GAAGG,KAAoB,aAA0C,UAA5BH,EAAQA,QAAQ,GAAGG,KAAmB,YAA0C,iBAA5BH,EAAQA,QAAQ,GAAGG,MAAuD,YAA5BH,EAAQA,QAAQ,GAAGG,MAAkD,SAA5BH,EAAQA,QAAQ,GAAGG,KAAkB,YAA0C,SAA5BH,EAAQA,QAAQ,GAAGG,KAAkB,WAAa,MAAS,MAAtW,SACE,iCACE,qBAAKD,UAAU,aAAf,SACE,uBAAOE,KAAO,OAAOF,UAAU,aAAaG,YAAa,YAAYC,SAAW,SAAAC,GAAC,OAAIR,EAASQ,EAAEC,OAAOC,QAAQA,MAAOX,EAAOY,WAnBtH,SAAAC,GACG,UAAZA,EAAIC,KACNC,MAAM,GAAD,OAAItC,EAAJ,qBAAyBuB,EAAzB,kBAAwCvB,EAAxC,kBACJuC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GAEFhB,EAAWgB,GACXlB,EAAS,IACTmB,QAAQC,IAAIF,WAcW,oBAAhBjB,EAAQG,KACjB,gCACE,sBAAKD,UAAU,eAAf,UACE,sBAAKA,UAAU,WAAf,UAA2BF,EAAQoB,KAAnC,KAA2CpB,EAAQqB,IAAIC,WACvD,qBAAKpB,UAAU,OAAf,SAAuB1B,EAAY,IAAI+C,WAGzC,sBAAKrB,UAAU,cAAf,UACI,sBAAKA,UAAU,OAAf,UAAuBsB,KAAKC,MAAMzB,EAAQG,KAAKuB,MAA/C,WACA,qBAAKxB,UAAU,UAAf,SAA0BhB,EAAUc,EAAQA,QAAQ,GAAG2B,qBAGtD,SCrDAC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBhB,MAAK,YAAkD,IAA/CiB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,K","file":"static/js/main.87ade4cf.chunk.js","sourcesContent":["import React, {useState} from 'react'\n\nconst api = {\n  key: \"7b415b9ab29cabca9e76e104e676faee\",\n  base: \"https://api.openweathermap.org/data/2.5/\"\n}\n\nconst datebuilder = (d) => {\n  let months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"]\n  let days = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\n\n  let day = days[d.getDay()];\n  let date = d.getDate();\n  let month = months[d.getMonth()];\n  let year = d.getFullYear();\n\n  return `${day}, ${month} ${date} ${year}`\n}\nconst titleCase = (string) => {\n  let sentence = string.toLowerCase().split(\" \");\n  for(var i = 0; i< sentence.length; i++){\n     sentence[i] = sentence[i][0].toUpperCase() + sentence[i].slice(1) + \" \";\n  }\n  sentence.join(\" \");\n  return sentence\n}\n\nfunction App() {\n  const [query, setQuery] = useState('');\n  const [weather, setWeather] = useState({});\n\n  const search = evt => {\n    if (evt.key === \"Enter\") {\n      fetch(`${api.base}weather?q=${query}&appid=${api.key}&units=metric`)\n      .then(res => res.json())\n      .then(result => \n        {\n          setWeather(result);\n          setQuery('');\n          console.log(result);\n        });\n    }\n  }\n\n  \n\n  return (\n    <div className={(typeof weather.main != \"undefined\") ? (weather.weather[0].main === \"Clouds\" ? \"App cloudy\": weather.weather[0].main === \"Clear\" ? \"App clear\" : weather.weather[0].main === \"Thunderstorm\" || weather.weather[0].main === \"Drizzle\" || weather.weather[0].main === \"Rain\" ? \"App rainy\" : weather.weather[0].main === \"Snow\" ? \"App snow\" : \"App\") : \"App\"}>\n      <main>\n        <div className=\"search-box\">\n          <input type = \"text\" className=\"search-bar\" placeholder= \"Search...\" onChange={ e => setQuery(e.target.value)} value={query} onKeyPress={search}></input>\n        </div>\n\n        {(typeof weather.main != \"undefined\") ? (\n        <div>\n          <div className=\"location-box\">\n            <div className=\"location\">{weather.name}, {weather.sys.country}</div>\n            <div className=\"date\">{datebuilder(new Date())}</div>\n          </div>\n\n          <div className=\"weather-box\">\n              <div className=\"temp\">{Math.round(weather.main.temp)}Â°C</div>\n              <div className=\"weather\">{titleCase(weather.weather[0].description)}</div>\n          </div>\n        </div>\n          ) : ('')}\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}